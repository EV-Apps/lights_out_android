package com.captainhampton.android.lightsout.solver;

import org.ejml.simple.SimpleMatrix;

public class SolverUtils {

    public static SimpleMatrix getAdjacencyMatrix(int numRows, int numCols) {

        if (numRows == 3 && numCols == 3) {
            SimpleMatrix A = new SimpleMatrix(new double[][]
                    {
                            {1, 1, 0, 1, 0, 0, 0, 0, 0},
                            {1, 1, 1, 0, 1, 0, 0, 0, 0},
                            {0, 1, 1, 0, 0, 1, 0, 0, 0},
                            {1, 0, 0, 1, 1, 0, 1, 0, 0},
                            {0, 1, 0, 1, 1, 1, 0, 1, 0},
                            {0, 0, 1, 0, 1, 1, 0, 0, 1},
                            {0, 0, 0, 1, 0, 0, 1, 1, 0},
                            {0, 0, 0, 0, 1, 0, 1, 1, 1},
                            {0, 0, 0, 0, 0, 1, 0, 1, 1},
                    });
            return A;
        }

        if (numRows == 3 && numCols == 4) {
            SimpleMatrix A = new SimpleMatrix(new double[][]
                    {
                            {1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                            {1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                            {0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0},
                            {1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
                            {0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0},
                            {0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0},
                            {0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
                            {0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0},
                            {0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0},
                            {0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1},
                            {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1},
                    });
            return A;
        }

        if (numRows == 4 && numCols == 4) {
            SimpleMatrix A = new SimpleMatrix(new double[][]
                    {
                            {1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                            {1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                            {0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0},
                            {0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
                            {0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0},
                            {0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0},
                            {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1},

                    });
            return A;
        }


        if (numRows == 5 && numCols == 5) {
            SimpleMatrix A = new SimpleMatrix(new double[][]
                    {
                            {1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1},
                    });
            return A;
        }

        if (numRows == 6 && numCols == 6) {
        }


        // TODO : Fix this. This case is basically one where we don't have for specified rows/cols
        SimpleMatrix M = new SimpleMatrix(numRows*numCols, numRows*numCols);
        return M;



//        SimpleMatrix M = new SimpleMatrix(numRows*numCols, numRows*numCols);
//        Solver solver = new Solver(numRows, numCols);
//
//        int row_count = 0;
//        for (int i = 0; i < numRows; i++) {
//            for (int j = 0; j < numCols; j++) {
//                double[] vec = solver.getAdjacentPositions(i,j);
//                M.setRow(row_count,0,vec);
//                row_count++;
//            }
//        }
//        return M;
    }
}
